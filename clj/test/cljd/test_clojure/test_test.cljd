(ns cljd.test-clojure.test-test
  (:use [cljd.test :only [deftest testing is use-fixtures]]))

(def ^:private test-state
  (atom {}))

(defn ^:private onetime-fixture
  ([] ;; setup
   (swap! test-state assoc :base-data :foo))
  ;; the "teardown" (1-arity) version is called with what the "setup" returned
  ([_] ;; teardown
   (reset! test-state {})))

(defn ^:private repeated-fixture
  "Resets test-state to what it was before running the tests"
  ([] ;;setup
   @test-state)
  ([start-state] ;; teardown
   (reset! test-state start-state)))

(use-fixtures :once onetime-fixture)
(use-fixtures :each repeated-fixture)

;; test order is not guaranteed, so both tests test for
;; the reset of the state by the :each fixture

(deftest mutator-test-one
  (testing "Initial state"
    (is (= {:base-data :foo} @test-state)
        ":once fixtures are run before any tests and in the very end"))

  (testing "Mutating state"
    (swap! test-state assoc :base-data :bar)
    (is (= :bar (:base-data @test-state)))

    (swap! test-state assoc :my-data :baz)
    (is (= :baz (:my-data @test-state))))

  (testing "Mutated state"
    (is (= :baz (:my-data @test-state))
        ":each fixtures are run around `deftest`, not individual `is` or `testing`")))

(deftest mutator-test-two
  (testing "Initial state"
    (is (= {:base-data :foo} @test-state)
        ":once fixtures are run before any tests and in the very end"))

  (testing "Mutating state"
    (swap! test-state assoc :base-data :bar)
    (is (= :bar (:base-data @test-state)))

    (swap! test-state assoc :my-data :baz)
    (is (= :baz (:my-data @test-state))))

  (testing "Mutated state"
    (is (= :baz (:my-data @test-state))
        ":each fixtures are run around `deftest`, not individual `is` or `testing`")))
