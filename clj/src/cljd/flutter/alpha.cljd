(ns cljd.flutter.alpha
  "Bridging Flutter and Clojure"
  (:require ["package:flutter/widgets.dart" :as widgets]
            ["package:flutter/foundation.dart" :as foundation]
            [clojure.string :as str]))

; TODI create our own Key type which uses equiv and not ==

(defmacro nest
  "Nest forms (the first form being the root form, the 2nd its child, the 3rd its grand child...) adding the :child keyword before each nested form."
  [form & forms]
  (let [[form & forms] (reverse (cons form forms))]
    `(->> ~form ~@(for [form forms] (-> form (cond-> (symbol? form) list) (concat  [:child]) (with-meta (meta form)))))))

(defn- ^:macro-support camel-kebab [s]
  (str/replace s #"(^[A-Z])|[A-Z]" (fn [[s start]] (cond->> (str/lower-case s) (not start) (str "-")))))

(defmacro widget
  "Creates a widget by evaluating the body.
   The body may be preceded by options in the form of interleaved
   option names (as keywords) with their values.
   :key expr, when present, is used as the key of the widget, plain value,
              not a Key.
   :watch symbol-referencing an atom: this widget will be rebuilt everytime
          the atom change.
   :state [name init-value] creates an atom named state initialized to init-value,
                            watch for changes tp it.
   :context name, if you need to access the build context then provide its name here.
   :ticker name, bind name to a TickerProvider for a single AnimationController
   :tickers name, bind name to a TickerProvider for a several AnimationControllers
   :with [name-or-opt expr ...], declare resources whose lifecycle is managed
   by this widget. (They are initializzed and disposed by this widget.)
   Each name-or-opt expr pair is either:
     * name init-expr: initialize resource with init-expr and bind it under
       name, by default the resource will be freed by calling .dispose on it;
     * :dispose dispose-expr (right after a name init-expr pair) which tells
       to dispose of the resource by doing (-> name dispose-expr);
     * :let bindings, to introduce intermediate values which are not
       managed resources."
  {:arglists '[[:opt1 val1 ... :optN valN & body]]}
  [& args]
  (let [opts (take-while (comp keyword? first) (partition 2 args))
        body (drop (* 2 (count opts)) args)
        {:keys [context key state watch with ticker tickers inherits] :as opts} (into {} (map vec) opts)
        flutter-build-ctx (vary-meta (or context `ctx#) assoc :tag `widgets/BuildContext)
        watch (or watch (first state))
        key-expr (some->> key (list `foundation/ValueKey.))
        ticker-mixin (cond tickers `^:mixin widgets/TickerProviderStateMixin ticker `^:mixin widgets/SingleTickerProviderStateMixin)
        inherits (if (vector? inherits) {:of inherits} inherits)
        inherits (if-some [shortcuts (:of inherits)]
                   (into (dissoc inherits :of)
                     (map (fn [type-or-kw]
                            (let [hint (cond-> type-or-kw (seq? type-or-kw) first)]
                              [(symbol
                                 (if (keyword? hint)
                                   (name hint)
                                   (camel-kebab (re-find #"[^.]+$" (name hint)))))
                               type-or-kw])))
                     shortcuts)
                   inherits)
        inherits-bindings
        (mapcat
          (fn [[sym type-or-kw]]
            (let [[type-or-kw & args] (cond-> type-or-kw (not (seq? type-or-kw)) list)
                  op (if (keyword? type-or-kw)
                       (throw (Exception. "Not implemented"))
                       (symbol
                         (if-some [ns (namespace type-or-kw)]
                           (str ns "." (name type-or-kw))
                           (name type-or-kw))
                         "of"))]
              [sym (list* op flutter-build-ctx args)]))
          inherits)
        init-let-bindings (into []
                            (mapcat (fn [[lhs rhs :as binding]]
                                      (case lhs
                                        :let rhs
                                        :dispose nil
                                        binding)))
                            (partition 2 with))
        dispose-statements (second (reduce ; we lose inferred types
                                     (fn [[dispose stmts] [lhs rhs]]
                                       (case lhs
                                         :let [nil stmts]
                                         :dispose [rhs stmts]
                                         [nil (conj stmts `(-> ~lhs ~(or dispose '.dispose)))]))
                                     [nil []] (reverse (partition 2 with))))
        build+dispose `build+dispose#
        state-sym `^widgets/State state#
        super-sym `super#
        expr `(let [~@inherits-bindings] ~@body)]
    (if (or watch (seq with) ticker-mixin)
      (cond->>
          `(reify :extends (widgets/StatefulWidget. :key ~key-expr)
             :no-meta true
             (~'createState [_#]
               (reify :extends widgets/State
                 :no-meta true
                 (~'initState [~(with-meta state-sym {:super super-sym})]
                   (.initState ~super-sym)
                   ~(when (seq with)
                      `(let [~@(when ticker-mixin
                                 [(vary-meta (or ticker tickers) assoc :tag ticker-mixin) state-sym])
                             ~@init-let-bindings]
                         (vreset! ~build+dispose
                           [(fn [~flutter-build-ctx] ~expr)
                            (fn [] ~@dispose-statements
                              (vreset! ~build+dispose nil))])))
                   ~(when watch
                      `(add-watch ~watch ~state-sym (fn [k# r# o# n#] (.setState ~state-sym (fn [])))))
                  nil)
                 (~'dispose [~(with-meta state-sym {:super super-sym})]
                   ~(when watch `(remove-watch ~watch ~state-sym))
                   ~(when (seq with)
                      `((second (deref ~build+dispose))))
                   (.dispose ~super-sym))
                 (~'build [~state-sym ~flutter-build-ctx]
                   ~(if (seq with)
                      `((first (deref ~build+dispose)) ~flutter-build-ctx)
                      ; when no :with, just build here
                      expr))
                 ~@(when ticker-mixin [ticker-mixin]))))
        state
        (list `let [(first state) `(atom ~(second state))])
        (seq with)
        (list `let [build+dispose `(volatile! nil)]))
      `(reify :extends (widgets/StatelessWidget. :key ~key-expr)
         (~'build [_# ~flutter-build-ctx] ~expr)))))
