(ns cljd.reader
  (:require ["dart:io" :as io]
            ["dart:async" :as async]
            ["dart:collection" :as coll]
            ["dart:convert" :as convert]))

(def ^RegExp SPACE-REGEXP #"[\s,]*")

;; REFACTORING THE READER
;; Two goals:
;; * perfs
;; * synchronous read-string

; stack is interleaved state and fns
(deftype ReaderState [^List stack  ^coll/Queue q])

(defn resume! [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (loop [from from]
    (if (or (neg? from) (.-isEmpty stack))
      from
      (recur ((.-last stack) state s from to)))))

(defn eof! [^ReaderState {:flds [stack] :as state}]
  (while (.-isNotEmpty stack)
    ((.-last stack) state)))

;; We are using the dart:convert classes to get us async and sync
;; It means we have to provide a Decoder.
;; What's interesting is what happens when a chunked conversion is started.
(deftype CljDecoder [init-state!]
  :extends #/(convert/Converter String Object?)
  (convert [this s]
    (let [^ReaderState state (doto (ReaderState #dart [] (coll/Queue))
                               init-state!)
          from (resume! state s 0 (.-length s))]
      (when (neg? from)
        (eof! state))
      (-> state .-q .-first)))
  (startChunkedConversion [_ out]
    (let [^ReaderState state (doto (ReaderState #dart [] (coll/Queue))
                               init-state!)
          q (.-q state)
          drain! #(while (.-isNotEmpty q)
                    (.add out (.removeFirst q)))]
      (reify
        :extends convert/StringConversionSinkBase
        (close [_]
          (eof! state)
          (drain!)
          (.close out))
        (addSlice [this s from to is-last]
          (loop [from from]
            (let [from (resume! state s from to)]
              (drain!)
              (cond
                (not (neg? from)) ; read is over, let's resume!
                (do (init-state! state) (recur from))
                is-last (.close this)))))))))

(defn do-read-token
  ([^ReaderState {:flds [q stack] :as state}]
   (let [n-2 (- (.-length stack) 2)
         ^StringBuffer sb (aget stack n-2)]
     (.-length! stack n-2)
     (-> state .-q (.add (.toString sb)))))
  ([^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
   (let [n-2 (- (.-length stack) 2)
         ^StringBuffer sb (aget stack n-2)]
     (loop [from from]
       (if (< from to)
         (if (terminating? s from)
           (do
             (.-length! stack n-2)
             (-> state .-q (.add (.toString sb)))
             from)
           (let [cu (.codeUnitAt s from)]
             (.writeCharCode sb cu)
             (recur (inc from))))
         -1)))))

(defn read-token
  [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (doto stack
    (.add (StringBuffer (. s "[]" from)))
    (.add do-read-token))
  (do-read-token state s (inc from) to))

(defn dispatch [^ReaderState state ^String s ^int from ^int to]
  (let [cu (.codeUnitAt s from)]
    (if-some [rd (when (< cu 128) (aget macros cu))]
      (rd state s (inc from) to)
      (let [_ (-> state .-stack (.add post-interpret-token))
            from (read-token state s from to)]
        (if (neg? from)
          from
          (post-interpret-token state s from to))))))

(defn interpret-token [^String token]
  (case token
    "nil" nil
    "true" true
    "false" false
    (if-some [m (.matchAsPrefix INT-REGEXP token)]
      (let [parse (if ^some (.group m 8)
                    (if (== "-" (.group m 1))
                      (fn ^BigInt [^String s ^int radix] (- (BigInt/parse s .radix radix)))
                      (fn ^BigInt [^String s ^int radix] (BigInt/parse s .radix radix)))
                    (if (== "-" (.group m 1))
                      (fn ^int [^String s ^int radix] (- (int/parse s .radix radix)))
                      (fn ^int [^String s ^int radix] (int/parse s .radix radix))))]
        (cond
          (not (nil? (.group m 2))) 0
          (not (nil? (.group m 3))) (parse (.group m 3) 10)
          (not (nil? (.group m 4))) (parse (.group m 4) 16)
          (not (nil? (.group m 5))) (parse (.group m 5) 8)
          (not (nil? (.group m 7))) (parse (.group m 7) (int/parse ^String (.group m 6)))
          :else (throw (FormatException. (str "Invalid number: " token ".")))))
      (if-some [m (.matchAsPrefix DOUBLE-REGEXP token)]
        (if (.group m 4)
          (throw (FormatException. "BigDecimal not supported yet."))
          (double/parse token))
        (if-some [^Match m (.matchAsPrefix SYMBOL-REGEXP token)]
          (let [g1 (.group m 1)
                g2 (.group m 2)
                g3 (.group m 3)
                g4 (.group m 4)]
            (when (or
                    (and g3 (.endsWith g3 ":/"))
                    (.endsWith g4 ":")
                    (not= -1 (.indexOf token "::" 1)))
              (FormatException. (str "Invalid token: " token)))
            (if g1
              (if-some [nsym (if g3 (resolveAlias *resolver* (symbol nil g3)) (currentNS *resolver*))]
                (keyword (name nsym) g4)
                (FormatException. (str "Invalid token: " token)))
              (if g2
                (keyword g3 g4)
                (symbol g3 g4))))
          (throw (FormatException. (str "Invalid token: " token))))))))

(def post-interpret-token (post-read interpret-token))

(defn skip-space [^String s ^int from ^int to]
  (let [{end .-end} (.matchAsPrefix SPACE-REGEXP s from)]
    (if (< end to)
      end
      -1)))

(defn do-read
  ([^ReaderState {:flds [stack q] :as state}]
   (when (.-isEmpty q)
     (throw (Exception "EOF while reading")))
   (.removeLast stack))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (if (.-isNotEmpty q)
     (do
       (.removeLast stack)
       from)
     (let [from (skip-space s from to)]
       (cond
         (neg? from) from
         (< from to)
         (let [from (dispatch state s from to)]
           (if (neg? from)
             from
             ; something has been read but the q may still be empty, let's loop to check!
             (recur state s from to)))
         :else -1)))))

(defn read
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (if (-> state .-q .-isNotEmpty)
    from
    (do
      (.add stack do-read)
      (do-read state s from to))))

(defn do-maybe-read
  ([^ReaderState {:flds [stack q] :as state}]
   (.removeLast stack))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (if (.-isNotEmpty q)
     (do
       (.removeLast stack)
       from)
     (let [from (skip-space s from to)]
       (cond
         (neg? from) from
         (< from to)
         (let [from (dispatch state s from to)]
           (if (neg? from)
             from
             ; something has been read but the q may still be empty, let's loop to check!
             (recur state s from to)))
         :else -1)))))

(defn maybe-read
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (if (-> state .-q .-isNotEmpty)
    from
    (do
      (.add stack do-maybe-read)
      (do-maybe-read state s from to))))

(defn mk-read-coll [closing-delim mk-coll]
  (let [closing-cu (int closing-delim)
        do-read-coll
        (fn
          ([^ReaderState state] (throw (Exception "EOF while reading")))
          ([^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
           (let [n-2 (- (.-length stack) 2)
                 ^List items (aget stack n-2)]
             (loop [from (skip-space s from to)]
               (.addAll items q)
               (.clear q)
               (cond
                 (neg? from) from
                 (< from to)
                 (if (== closing-cu (.codeUnitAt s from))
                   (do
                     (.-length! stack n-2)
                     (.add q (mk-coll items))
                     (inc from))
                   (let [from (read state s from to)]
                     (if (neg? from)
                       from
                       (recur from))))
                 :else -1)))))]
    (fn
      ([^ReaderState state] (throw (Exception "EOF encoutered, expecting closing delimiter.")))
      ([^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
       (doto stack
         (.add #dart [])
         (.add do-read-coll))
       (do-read-coll state s from to)))))

;; a chunked reader is a stateful function with three arities:
;; EOF: [] -> ?
;; chunk [s from to] -> reader
;; result [x] -> reader

;; a chunked reader is a stateful function [string from to] -> i
;; when i < 0 all input was consumed
;; else reader is done and input upto i (excluded) is consumed
;; if string is nil then it means EOF

(def ^RegExp INT-REGEXP (RegExp. "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$"))
(def ^RegExp DOUBLE-REGEXP (RegExp "([-+]?[0-9]+([.][0-9]*)?([eE][-+]?[0-9]+)?)(M)?$"))
(def ^RegExp SYMBOL-REGEXP (RegExp "(?:([:]{2})|([:]))?(?:([^0-9/:].*)/)?(/|[^0-9/][^/]*)$"))

(defn terminating? ^bool [^String s ^int i]
  (some? (.matchAsPrefix #"[\s,;()\[\]{}\"~^@`\\]" s i)))

(defprotocol IResolver
  (currentNS [resolver])
  (resolveClass [resolver sym])
  (resolveAlias [resolver sym])
  (resolveVar [resolver sym]))

(def ^:dynamic *resolver* nil)

(def ^RegExp STRING-ESC-REGEXP
  #"\\(?:u([0-9a-fA-F]{0,4})|([0-7]{1,3})|(.))")

(defn- unesc [^String s]
  (.replaceAllMapped s
    STRING-ESC-REGEXP
    (fn [^Match m]
      (if-some [m1 (.group m 1)]
        (if (< (.-length m1) 4)
          (throw (FormatException (str "Unsupported escape for character: \\u" m1 " \\u MUST be followed by 4 hexadecimal digits")))
          (String/fromCharCode (int/parse m1 .radix 16)))
        (if-some [m2 (.group m 2)]
          (String/fromCharCode (int/parse m2 .radix 8))
          (let [m3 (.group m 3)]
            (case m3
              "\"" (str m3)
              "\\" (str m3)
              "b" "\b"
              "n" "\n"
              "r" "\r"
              "t" "\t"
              "f" "\f"
              (throw (FormatException (str "Unsupported escape character: \\" m3))))))))))

(defn do-read-raw-string
  ([^ReaderState state] (throw (Exception "EOF encoutered, string not properly terminated.")))
  ([^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
   (let [n-3 (- (.-length stack) 3)
         ^StringBuffer sb (aget stack (inc n-3))]
     (loop [from from ^bool esc (aget stack n-3)]
       (if (< from to)
         (let [cu (.codeUnitAt s from)]
           (if (and (not esc) (== 34 cu)) ; \"
             (do
               (.-length! stack n-3)
               (->> sb .toString (.add q))
               (inc from))
             (do
               (.writeCharCode sb cu)
               (recur (inc from) (and (not esc) (== 92 cu)))))) ; \\
         (do
           (aset stack n-3 esc)
           -1))))))

(def post-stringlit (post-read unesc))

(defn read-stringlit
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (doto stack
    (.add post-stringlit)
    (.add false) ; escape flag
    (.add (StringBuffer))
    (.add do-read-raw-string))
  (let [from (do-read-raw-string state s from to)]
    (if (neg? from)
      from
      (post-stringlit state s from to))))

(def post-regexp (post-read #(RegExp %)))

(defn read-regexp
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (doto stack
    (.add post-regexp)
    (.add false) ; escape flag
    (.add (StringBuffer))
    (.add do-read-raw-string))
  (let [from (do-read-raw-string state s from to)]
    (if (neg? from)
      from
      (post-regexp state s from to))))

(def post-char-token
  (post-read
    (fn [^String token]
      (if (= 1 (.-length token))
        token
        (case token
          "newline" \newline
          "space" \space
          "tab" \tab
          "backspace" \backspace
          "formfeed" \formfeed
          "return" \return
          (cond
            (.startsWith token "u")
            (let [cu (int/parse (.substring token 1) .radix 16)]
              (when (or (not= 5 (.-length token))
                      (neg? cu)
                      (<= 0xD800 cu 0xDFFF))  ; surrogate code unit?
                (throw (Exception (str "Invalid character constant: \\" token))))
              (String/fromCharCode cu))
            (.startsWith token "o")
            (let [cu (int/parse (.substring token 1) .radix 8)]
              (when (< 4 (.-length token))
                (throw (Exception (str "Invalid octal escape sequence length: " (dec (.-length token))))))
              (when-not (<= 0 cu 0377)
                (throw (Exception "Octal escape sequence must be in range [0, 377].")))
              (String/fromCharCode cu))
            :else (throw (Exception (str "Unsupported character: \\" token)))))))))

(defn read-char
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (.add stack post-char-token)
  (let [from (read-token state s from to)]
    (if (neg? from)
      from
      (post-char-token state s from to))))

(defn do-read-meta
  ([^ReaderState {:flds [stack] :as state}]
   (when (neg? (do-read-meta state "" 0 0))
     (throw (Exception "EOF while reading a value with metadata."))))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (let [n-2 (- (.-length stack) 2)]
     (loop [from from]
       (let [from (read state s from to)]
         (if (neg? from)
           from
           (let [x (.removeFirst q)]
             (if-some [m (aget stack n-2)]
               (do
                 (.-length! stack n-2)
                 (.addFirst q (with-meta x m))
                 from)
               (let [m (cond
                         (map? x) x
                         (keyword? x) {x true}
                         (or (symbol? x) (string? x)) {:tag x}
                         :else (throw (Exception (str "Invalid value as metadata: " (pr-str x)))))]
                 (aset stack n-2 m)
                 (recur from))))))))))

(defn read-meta
  [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (do
    (.add stack nil)
    (.add stack do-read-meta)
    (do-read-meta state s from to)))


(defn do-namespace [m ns]
  (persistent!
    (reduce-kv
      (fn [tm k v]
        (if-some [k' (cond
                       (keyword? k)
                       (case (namespace k)
                         nil (keyword ns (name k))
                         "_" (keyword (name k))
                         nil)
                       (symbol? k)
                       (case (namespace k)
                         nil (symbol ns (name k))
                         "_" (symbol (name k))
                         nil))]
          (-> tm (dissoc! k) (assoc! k' v))
          tm))
      (transient m) m)))

(defn do-read-namespaced-map
  ([^ReaderState {:flds [stack] :as state}]
   (throw (Exception "EOF while reading a namespaced map.")))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (let [n-2 (- (.-length stack) 2)]
     (loop [from from]
       (if-some [ns (aget stack n-2)]
         (let [from (read state s from to)]
           (if (neg? from)
             from
             (let [m (.removeFirst q)]
               (.-length! stack n-2)
               (when-not (map? m)
                 (throw (Exception "Only maps can be namespaced.")))
               (.addFirst q (do-namespace m ns))
               from)))
         (let [from (read-token state s from to)]
           (if (neg? from)
             from
             (let [x (.removeFirst q)
                   ns (case x
                        "::" (name (currentNS *resolver*))
                        (let [k (interpret-token x)]
                          (when-not (simple-keyword? k)
                            (throw (Exception "Only simple keywords can be used as namespaces in namespaced maps.")))
                          (name k)))]
               (aset stack n-2 ns)
               (recur from)))))))))

(defn read-namespaced-map
  [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (do
    (.add stack nil)
    (.add stack do-read-namespaced-map)
    (do-read-namespaced-map state s (dec from) to)))

(defn get-binding [^List stack k]
  (let [i (inc (.lastIndexOf stack k))]
    (when (pos? i) (aget stack i))))

(defn do-pop-binding
  ([^ReaderState {:flds [stack] :as state}]
   (.-length! stack (- (.-length stack) 3)))
  ([^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
   (.-length! stack (- (.-length stack) 3))
   from))

(defn push-binding [^List stack k v]
  (doto stack
    (.add :args-env)
    (.add v)
    (.add do-pop-binding)))

(defn read-anon-arg
  [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (let [^Map? args-env (get-binding stack :args-env)
        post
        (post-read
          (if (nil? args-env)
            interpret-token
            (fn [token]
              (let [n (case token
                        "%" 1
                        "%&" -1
                        (or
                          (let [n (interpret-token token)]
                            (when (dart/is? n num)
                              (let [n (.toInt ^num n)]
                                (when (or (pos? n) (= -1 n))
                                  n))))
                          (throw (FormatException. "arg literal must be %, %& or %integer"))))]
                (or (. args-env "[]" n)
                  (let [sym (gensym (if (pos? n) (str "p" n "__") "rest__"))]
                    (. args-env "[]=" n sym)
                    sym))))))
        _ (.add stack post)
        from (read-token state s from to)]
    (if (neg? from)
      from
      (post state s from to))))

(defn read-fn [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (let [args-env (Map)
        _ (push-binding stack :args-env args-env)
        read (mk-read-coll ")"
               (fn [items]
                 (let [n (reduce max 0 (keys args-env))
                       rest-arg (get args-env -1)
                       args
                       (cond->
                           (into [] (map (fn [i] (or (get args-env i) (gensym (str "p" i "__"))))) (range 1 (inc n)))
                         rest-arg
                         (conj '& rest-arg))]
                   (list 'fn* args (-list-lit items)))))
        from (read state s from to)]
    (if (neg? from)
      from
      (do-pop-binding state s from to))))

(defn post-read [f]
  (fn self
    ([^ReaderState {:flds [stack] :as state}]
     (self state "" 0 0))
    ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
     (let [x (.removeFirst q)]
       (.removeLast stack)
       (.addFirst q (f x))
       from))))

(defn mk-read-wrapped [sym]
  (let [post (post-read #(list sym %))]
    (fn [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
      (.add stack post)
      (let [from (read state s from to)]
        (if (neg? from)
          from
          (post state s from to))))))

(def read-non-splicing-unquote (mk-read-wrapped 'cljd.core/unquote))

(def read-splicing-unquote (mk-read-wrapped 'cljd.core/unquote-splicing))

(defn do-read-unquote
  ([^ReaderState {:flds [stack] :as state}]
   (throw (Exception "EOF after a ~")))
  ([^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
   (if (< from to)
     (do
       (.removeLast stack)
       (if (= \@ (. s "[]" from))
         (read-splicing-unquote state s (inc from) to)
         (read-non-splicing-unquote state s from to)))
     -1)))

(defn read-unquote [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (.add stack do-read-unquote)
  (do-read-unquote state s from to))

(def ^:dynamic *gensym-env* nil)

(defn unquote? [form]
  (and (seq? form) (= 'cljd.core/unquote (first form))))

(defn unquote-splicing? [form]
  (and (seq? form) (= 'cljd.core/unquote-splicing (first form))))

;; TODO: should not be in reader.cljd
(defn special-form? [form]
  (contains? '#{. set! dart/is? dart/await dart/assert throw new ns try case* quote do var let* loop* recur
                if fn* letfn def reify* deftype* defprotocol* extend-type-protocol*} form))

(defn- syntax-quote [form]
  (cond
    (special-form? form) (list 'quote form)
    (symbol? form)
    (let [nsform (namespace form)
          nameform (name form)]
      (->> (cond
             (and (nil? nsform) (.endsWith nameform "#"))
             (if  (nil? *gensym-env*)
               ;; Should never happen
               (throw (FormatException. "Gensym literal not in syntax-quote"))
               (or
                 (*gensym-env* form)
                 (let [gs (symbol nil
                            (str (gensym (str (.substring nameform 0 (dec (.-length nameform))) "__")) "__auto__"))]
                   (set! *gensym-env* (assoc *gensym-env* form gs))
                   gs)))
             (and (nil? nsform) (.endsWith nameform "."))
             (let [rc (resolveClass *resolver* (symbol nil (.substring nameform 0 (dec (.-length nameform)))))]
               (symbol (namespace rc) (str (name rc) ".")))
             (and (nil? nsform) (.startsWith nameform "."))
             form
             :else
             (let [nsym (let [alias (some->> nsform (symbol nil))
                              nsym (some->> alias (resolveClass *resolver*))]
                          (if (nil? nsym) (resolveAlias *resolver* alias) nsym))]
               (if (not (nil? nsym))
                 (symbol (name nsym) nameform)
                 (if (nil? nsform)
                   (let [rsym (resolveClass *resolver* form)
                         rsym (if (nil? rsym) (resolveVar *resolver* form) rsym)]
                     (if (not (nil? rsym))
                       rsym
                       (symbol (name (currentNS *resolver*)) nameform)))
                   form))))
        (list 'quote)))
    (unquote? form) (second form)
    (unquote-splicing? form) (throw (FormatException. "splice not in list"))
    (number? form) form
    (string? form) form
    (keyword? form) form
    (coll? form)
    (cond
      ;; TODO records
      (vector? form)
      (list 'cljd.core/apply 'cljd.core/vector (list 'cljd.core/seq (cons 'cljd.core/concat (sq-expand-list form))))
      (set? form)
      (list 'cljd.core/apply 'cljd.core/hash-set (list 'cljd.core/seq (cons 'cljd.core/concat (sq-expand-list form))))
      (map? form)
      (list 'cljd.core/apply 'cljd.core/hash-map (list 'cljd.core/seq (cons 'cljd.core/concat (sq-expand-list (apply concat form)))))
      (or (list? form) (seq? form))
      (list 'cljd.core/seq (cons 'cljd.core/concat (sq-expand-list form)))
      :else (throw (FormatException. "Unknown Collection type")))
    :else (list 'quote form)))

(defn- sq-expand-list [s]
  (doall (map #(cond
                 (unquote? %) (list 'cljd.core/list (second %))
                 (unquote-splicing? %) (second %)
                 :else (list 'cljd.core/list (syntax-quote %))) s)))

(def post-syntax-quote
  (post-read
    (fn [form]
      (binding [*gensym-env* {}]
        (syntax-quote form)))))

(defn read-syntax-quote [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (.add stack post-syntax-quote)
  (let [from (read state s from to)]
    (if (neg? from)
      from
      (post-syntax-quote state s from to))))

(defn do-discard
  ([^ReaderState {:flds [stack] :as state}]
   (when (neg? (do-discard state "" 0 0))
     (throw (Exception "EOF while reading a discarded form."))))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (let [from (read state s from to)]
     (if (neg? from)
       from
       (let [_ (.removeFirst q)]
         (.removeLast stack)
         from)))))

(defn discard
  [^ReaderState {:flds [stack] :as state} ^String s ^int from ^int to]
  (do
    (.add stack do-discard)
    (do-discard state s from to)))

(defn do-read-comment
  ([^ReaderState {:flds [stack]}] (.removeLast stack))
  ([^ReaderState {:flds [stack]} ^String s ^int from ^int to]
   (loop [from from]
     (if (< from to)
       (let [cu (.codeUnitAt s from)]
         (if (== 10 cu) ; newline
           (do
             (.removeLast stack)
             (inc from))
           (recur (inc from))))
       -1))))

(defn read-comment
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (.add stack do-read-comment)
  (do-read-comment state s from to))

(defn do-read-ctor
  ([^ReaderState {:flds [stack] :as state}]
   (throw (Exception "EOF while reading a tagged literal.")))
  ([^ReaderState {:flds [stack q] :as state} ^String s ^int from ^int to]
   (let [n-2 (- (.-length stack) 2)]
     (loop [from from]
       (if-some [data-reader (aget stack n-2)]
         (let [from (read state s from to)]
           (if (neg? from)
             from
             (let [data (.removeFirst q)]
               (.-length! stack n-2)
               (.addFirst q (data-reader data))
               from)))
         (let [from (read state s from to)]
           (if (neg? from)
             from
             (let [x (.removeFirst q)
                   data-reader
                   (cond
                     (not (symbol? x))
                     (throw (Exception "Reader tag must be a symbol"))
                     (.contains (name x) ".")
                     (throw (Exception "Reader tag name can't contain a dot (reserved for compatibility and future use)."))
                     :else
                     (or
                       (*data-readers* x)
                       (default-data-readers x)
                       (when-some [df *default-data-reader-fn*]
                         #(df x %))
                       (throw (str "No reader function for tag " x))))]
               (aset stack n-2 data-reader)
               (recur from)))))))))

(defn read-ctor [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (.add stack nil)
  (.add stack do-read-ctor)
  (do-read-ctor state s from to))

(defn do-read-dispatch-macro
  ([^ReaderState state] (throw (Exception "EOF encoutered after a #.")))
  ([^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
   (if (< from to)
     (let [cu (.codeUnitAt s from)]
       (.removeLast stack)
       (if-some [rd (when (< cu 128) (aget dispatch-macros cu))]
         (rd state s (inc from) to)
         (read-ctor state s from to))))))

(defn read-dispatch-macro
  [^ReaderState {:flds [q stack] :as state} ^String s ^int from ^int to]
  (.add stack do-read-dispatch-macro)
  (do-read-dispatch-macro state s from to))

(defn unexpected [msg]
  (fn [_ _ _ _]
    (throw (FormatException (str "Unexpected " msg ".")))))

(def macros
  (doto (List/filled 128 nil)
    (aset (int "\"") read-stringlit)
    (aset (int "\\") read-char)
    (aset (int "~") read-unquote)
    (aset (int \`) read-syntax-quote)
    (aset (int \%) read-anon-arg)
    (aset (int "(") (mk-read-coll ")" -list-lit))
    (aset (int ")") (unexpected "closing parenthesis"))
    (aset (int "{")
      (mk-read-coll "}"
        (fn [kvs]
          (if (even? (count kvs))
            (-map-lit kvs)
            (throw (FormatException "Map literal must contain an even number of forms"))))))
    (aset (int "}") (unexpected "closing curly brace"))
    (aset (int "[") (mk-read-coll "]" vec))
    (aset (int "]") (unexpected "closing square bracket"))
    (aset (int "^") read-meta)
    (aset (int "@") (mk-read-wrapped 'cljd.core/deref))
    (aset (int "'") (mk-read-wrapped 'quote))
    (aset (int "#") read-dispatch-macro)
    (aset (int ";") read-comment)))

(def dispatch-macros
  (doto (List/filled 128 nil)
    (aset (int "_") discard)
    (aset (int "(") read-fn)
    (aset (int "{") (mk-read-coll "}" set))
    (aset (int \") read-regexp)
    (aset (int \') (mk-read-wrapped 'var))
    (aset (int \:) read-namespaced-map)))

(defn read-string
  "Synchronous, takes a string and returns the value of the first form."
  [s]
  (.convert (CljDecoder #(read % "" 0 0)) s))

(defn ^Stream read-stream
  "Takes a stream of strings and returns a stream of read values."
  [s]
  (.bind (CljDecoder #(maybe-read % "" 0 0)) s))
