(ns cljd.flutter
  (:require ["package:flutter/widgets.dart" :as widgets]
            ["package:flutter/material.dart" :as material]
            ["package:flutter/foundation.dart" :as foundation]
            ["dart:async" :as dart:async]
            [cljd.string :as str])
  (:host-ns
   (:require [clojure.string :as str])))

(defprotocol Subscribable
  (-subscribe [x f!]
    "Subscribe to updates on x.
     f! is a side-effecting function of one argument which will be called
     for every FUTURE value yielded by x.
     f! MUST NOT BE CALLED with current value of x (if it makes sense for x).
     As such f! MUST NEVER BE CALLED during the -subscribe call.
     Returns a subscription token.")
  (-call-with-immediate-value [x sub f!]
    "If x under subscription (identified by token sub) has a current value, pass it to f!.
     Returns a boolean indicating if there was a current value.
     Must be called right after -subscribe. Later calls have no specified
     behavior.")
  (-unsubscribe [x sub] "Cancels the provided subscription token."))

(extend-protocol Subscribable
  Null
  (-subscribe [n f!] nil)
  (-call-with-immediate-value [n sub f!] false)
  (-unsubscribe [n _] nil)
  cljd.core/Atom
  (-subscribe [a f]
    (let [cb (fn [_ _ _ new-state] (f new-state))]
      (add-watch a cb cb)
      cb))
  (-call-with-immediate-value [a sub f!] (f! @a) true)
  (-unsubscribe [a cb]
    (remove-watch a cb))
  Stream
  (-subscribe [s f]
    (.listen s (fn [x] (f x) nil) .cancelOnError true))
  (-call-with-immediate-value [s sub f!] false)
  (-unsubscribe [s sub]
    (.cancel ^dart:async/StreamSubscription sub))
  Future
  (-subscribe [future f]
    (let [sub (volatile! true)]
      (.then future #(when @sub (f %)))
      sub))
  (-call-with-immediate-value [future sub f!] false)
  (-unsubscribe [future sub]
    (vreset! sub false))
  ; TODO & check if we handle partial order on protocols dispatch
  foundation/ValueListenable
  (-subscribe [vl f]
    (doto #(f (.-value vl))
      (->> (.addListener vl))))
  (-call-with-immediate-value [vl sub f!] (f! (.-value vl)) true)
  (-unsubscribe [vl listener]
    (.removeListener vl listener))
  foundation/Listenable
  (-subscribe [l f]
    (let [vn (volatile! 0)]
      (doto #(f (vswap! vn inc))
        (->> (.addListener l)))))
  (-call-with-immediate-value [l sub f!] false)
  (-unsubscribe [l listener]
    (.removeListener l listener)))

(defprotocol StateLifecycle
  (-build [_ state ctx])
  (-update-state [_ state])
  (-init-state [_ state])
  (-dispose-state [_ state]))

(defn sub
  "Returns a subscribable view on another subscribable or vector of subscribables.
   Values are the result of (apply f v args) for all values v yielded by the
   upstream subscribable (in the case of a vector of subscribable,yielded values are
   vectors of each subscribable most recent value).
   This subscribable generates events only when the resulting value changes."
  [s f & args]
  (if (vector? s)
    (reify
      Subscribable
      (-subscribe [self f!]
        (let [v (volatile! nil)
              _ (vreset! v v)
              n (count s)
              ins (volatile! (vec (repeat n nil)))
              subs (into []
                     (map-indexed
                       (fn [i s]
                         (-subscribe s
                           (fn [x]
                             (let [ins (vswap! ins assoc i x)
                                   prev @v]
                               (when-not (identical? prev v) ; when not init
                                 (let [r (apply f ins args)]
                                   (when (not= r prev)
                                     (vreset! v r)
                                     (f! r)))))))))
                     s)]
          (f! (vreset! v (apply f @ins args)))
          subs))
      (-call-with-immediate-value [self subs f!]
        (let [vtv (volatile! (transient []))
              push! #(vswap! vtv conj! %)
              all-immediates
              (reduce-kv (fn [_ i s]
                           (or (-call-with-immediate-value s (nth subs i) push!)
                             (reduced false)))
                true s)]
          (when all-immediates
            ; TODO take immediate value as seed for deduping
            (f! (persistent! @vtv)))
          all-immediates))
      (-unsubscribe [self subs]
        (dorun (map -unsubscribe s subs))))
    (reify
      Subscribable
      (-subscribe [self f!]
        (let [v (volatile! nil)]
          (vreset! v v)
          (-subscribe s
            (fn [x]
              (let [x (apply f x args)]
                (when (not= x @v)
                  (vreset! v x)
                  (f! x)))))))
      (-call-with-immediate-value [self sub f!]
        ; TODO take immediate value as seed for deduping
        (-call-with-immediate-value s sub #(f! (apply f % args))))
      (-unsubscribe [self sub]
        (-unsubscribe s sub)))))

(deftype InheritedBindings [bindings child]
  :extends (widgets/InheritedModel .child child)
  (isSupportedAspect [this name] true)
  (updateShouldNotify [this prev-this]
    (not= bindings (.-bindings ^InheritedBindings prev-this)))
  (updateShouldNotifyDependent [this prev-this aspects]
    (let [prev-bindings (.-bindings ^InheritedBindings prev-this)]
      (boolean
        (some (fn [ks]
                ; should we rather use identity?
                (some (fn [k] (not= (prev-bindings k) (bindings k))) ks))
          aspects)))))

(defn- ^:macro-support collect-options
  "Returns [options-map & more]."
  [exprs supported-option?]
  (let [opts (take-while (comp keyword? first) (partition 2 exprs))
        exprs (drop (* 2 (count opts)) exprs)
        opts (into {} (map vec) opts)]
    (doseq [k (keys opts)]
      (when-not (supported-option? k)
        (throw (Exception. (str "Unsupported option: " k)))))
    (cons opts exprs)))

(defn- ^:macro-support camel-kebab [s]
  (str/replace s #"(^[A-Z])|[A-Z]" (fn [[s start]] (cond->> (str/lower-case s) (not start) (str "-")))))

(def ^:private ^:macro-support closest-context `^widgets/BuildContext context#)

(deftype WatchState
         [^:mutable k ^:mutable subscribable
          ^:mutable subscription ^:mutable latest]
  :extends widgets/State
  (initState [state]
    (.initState ^super state)
    (-init-state (.-widget state) state)
    nil)
  (didUpdateWidget [state old-widget]
    (.didUpdateWidget ^super state old-widget)
    (-update-state (.-widget state) state)
    nil)
  (dispose [state]
    (-dispose-state (.-widget state) state)
    (.dispose ^super state))
  (build [state ctx]
    (-build (.-widget state) state ctx))
  cljd.core/IFn
  (-invoke [state x]
    (set! latest x)
    (when (.-mounted state)
      (.setState state (fn []))))
  ^:mixin foundation/Diagnosticable
  (debugFillProperties [this props]
    (.debugFillProperties ^super this props)
    (.add props (foundation/DiagnosticsProperty "subscribable" subscribable))
    (.add props (foundation/DiagnosticsProperty "current value" latest))))

(defn ^:macro-support refresh-on-expr [opts &env expr]
  (if (contains? opts :refresh-on)
    (:refresh-on opts)
    (let [closed-overs ((:closed-overs &env) expr)]
      (if (next closed-overs)
        (vec closed-overs)
        ; works for 1 and 0 closed overs
        (first closed-overs)))))

(defn- ^:macro-support destructuring-bound-locals [destructuring-form]
  (letfn [(locals [ts form]
            (cond
              (symbol? form) (conj! ts form)
              (map? form)
              (reduce-kv
                (fn [ts k v]
                  (if (keyword? k)
                    (case (name k)
                      ("flds" "keys" "strs" "syms")
                      (transduce
                        (map #(-> % name symbol (with-meta (meta %))))
                        conj! ts v)
                      "or" ts
                      "as" (conj! ts v))
                    (locals ts k)))
                ts form)
              (vector? form)
              (transduce (remove '#{&}) conj! ts form)
              :else (throw (ex-info (str "Unexpected binding form " (pr-str form))
                             {:unexpected-form form
                              :whole-form destructuring-form}))))]
    (-> #{} transient (locals destructuring-form) persistent!)))

(defn ^:macro-support expand-watch
  [&env env binding expr {:keys [dispose] subscribable-binding :as :as opts} forms]
  (let [expr (list 'dart/async-barrier expr)
        accessor (:> opts)
        destructured-locals (when-not (symbol? binding)
                              (destructuring-bound-locals binding))
        dispose (if (true? dispose) '.dispose dispose)
        refresh-on (refresh-on-expr opts &env expr)
        ; destructuring may depend on existing locals (for defaults
        ; or even for key names) so we must take this into account
        destructuring-refresh-on
        (when (seq destructured-locals)
          (refresh-on-expr nil &env `(fn [~binding]
                                       ~(vec destructured-locals))))
        refresh-on
        (cond
          (not (and destructuring-refresh-on refresh-on))
          (or destructuring-refresh-on refresh-on)
          (vector? refresh-on)
          (if (vector? destructuring-refresh-on)
            (into refresh-on destructuring-refresh-on)
            (conj refresh-on destructuring-refresh-on))
          (vector? destructuring-refresh-on)
          (conj destructuring-refresh-on refresh-on)
          :else
          [refresh-on destructuring-refresh-on])
        state `state#
        subscribable `subscribable#
        update-state (if (or accessor destructured-locals)
                       (let [vsym `v#
                             vexpr (if accessor `(-> ~subscribable ~accessor) vsym)
                             vval `vval#
                             set-state-expr
                             (if (:dedup opts true)
                               `(when-not (= ~vval (.-latest ~state))
                                  (~state ~vval))
                               `(~state ~vval))]
                         `(fn [~vsym]
                            ~(if destructured-locals
                               `(let [~binding ~vexpr
                                      ~vval [~@destructured-locals]]
                                  ~set-state-expr)
                               `(let [~vval ~vexpr]
                                  ~set-state-expr))))
                       state)
        subscribe-call
        `(let [update# ~update-state
               sub# (-subscribe ~subscribable update#)]
           (or (-call-with-immediate-value ~subscribable sub# update#)
             (update# ~(:default opts)))
           sub#)]
    `(reify :extends (widgets/StatefulWidget .key ~(:key env))
       :no-meta true
       :name-hint "watch"
       (~'createState [_#] (WatchState nil nil nil nil))
       cljd.flutter/StateLifecycle
       (~'-init-state [_# state#]
         (let [~state ^WatchState state#
               ~subscribable ~expr]
           (doto ~state
             (.-k! ~refresh-on)
             (.-subscribable! ~subscribable)
             (.-subscription! ~subscribe-call))))
       (~'-dispose-state [_# state#]
         (let [state# ^WatchState state#]
           (doto (.-subscribable state#)
             (-unsubscribe (.-subscription state#))
             ~@(when dispose [`(-> (dart/type-like ~expr) ~dispose)]))
           (doto state#
             (.-k! nil)
             (.-subscribable! nil)
             (.-subscription! nil)
             (.-latest! nil))))
       (~'-build [_# state# ctx#]
        (let [~state ^WatchState state#
              ~(if destructured-locals (vec destructured-locals) binding) (.-latest ~state)
              ~closest-context ctx#
              ~@(when subscribable-binding
                  [subscribable-binding `(dart/type-like (.-subscribable ~state) ~expr)])]
          (-widget-cont ~(assoc env :key nil :closest-ctx true)
            ~@forms)))
       (~'-update-state [_# state#]
         (let [~state ^WatchState state#
               k# ~refresh-on]
           (when-not (= k# (.-k ~state))
             (doto (.-subscribable ~state)
               (-unsubscribe (.-subscription ~state))
               ~@(when dispose [`(-> (dart/type-like ~expr) ~dispose)]))
             (let [~subscribable ~expr]
               (doto ~state
                 (.-k! k#)
                 (.-subscribable! ~subscribable)
                 (.-subscription! ~subscribe-call)))))))))

(defn ^:macro-support expand-bg-watcher
  [&env env binding expr {:keys [dispose] :as opts} body forms]
  (let [accessor (:> opts)
        dispose (if (true? dispose) '.dispose dispose)
        refresh-on (refresh-on-expr opts &env expr)
        state `state#
        subscribable `subscribable#
        update-state (if accessor
                       `(fn [_#]
                          (let [~binding (-> ~subscribable ~accessor)]
                            ~@body
                            nil))
                       `(fn [x#]
                             (let [~binding x#]
                               ~@body
                               nil)))
        subscribe-call
        `(let [update# ~update-state
               sub# (-subscribe ~subscribable update#)]
           (-call-with-immediate-value ~subscribable sub# update#)
           sub#)]
    `(reify :extends (widgets/StatefulWidget .key ~(:key env))
       :no-meta true
       (~'createState [_#] (WatchState nil nil nil nil))
       cljd.flutter/StateLifecycle
       (~'-init-state [_# state#]
         (let [~state ^WatchState state#
               ~subscribable ~expr]
           (doto ~state
             (.-k! ~refresh-on)
             (.-subscribable! ~subscribable))
           (dart:async/scheduleMicrotask (fn [] (.-subscription! ~state ~subscribe-call)))))
       (~'-dispose-state [_# state#]
         (let [state# ^WatchState state#]
           (doto (.-subscribable state#)
             (-unsubscribe (.-subscription state#))
             ~@(when dispose [`(-> (dart/type-like ~expr) ~dispose)]))
           (doto state#
             (.-k! nil)
             (.-subscribable! nil)
             (.-subscription! nil))))
       (~'-build [_# state# ctx#]
         (let [~closest-context ctx#]
           (-widget-cont ~(assoc env :key nil :closest-ctx true)
                         ~@forms)))
       (~'-update-state [_# state#]
         (let [~state ^WatchState state#
               k# ~refresh-on]
           (when-not (= k# (.-k ~state))
             (doto (.-subscribable ~state)
               (-unsubscribe (.-subscription ~state))
               ~@(when dispose [`(-> (dart/type-like ~expr) ~dispose)]))
             (let [~subscribable ~expr]
               (doto ~state
                 (.-k! k#)
                 (.-subscribable! ~subscribable))
               (dart:async/scheduleMicrotask (fn [] (.-subscription! ~state ~subscribe-call))))))))))

(deftype ResourceState [^:mutable k ^:mutable resource]
  :extends widgets/State
  (initState [state]
    (.initState ^super state)
    (-init-state (.-widget state) state)
    nil)
  (didUpdateWidget [state old-widget]
    (.didUpdateWidget ^super state old-widget)
    (-update-state (.-widget state) state)
    nil)
  (dispose [state]
    (-dispose-state (.-widget state) state)
    (.dispose ^super state))
  (build [state ctx]
    (-build (.-widget state) state ctx))
  ^:mixin foundation/Diagnosticable
  (debugFillProperties [this props]
    (.debugFillProperties ^super this props)
    (.add props (foundation/DiagnosticsProperty "resource" resource))))

(defn ^:macro-support expand-resource
  [&env env binding expr opts forms]
  (let [dispose (:dispose opts '.dispose)
        refresh-on (refresh-on-expr opts &env expr)
        expr (list 'dart/async-barrier expr)]
    `(reify :extends (widgets/StatefulWidget .key ~(:key env))
       :no-meta true
       :name-hint "managed"
       (~'createState [_#] (ResourceState nil nil))
       cljd.flutter/StateLifecycle
       (~'-init-state [_# state#]
         (doto ^ResourceState state#
           (.-k! ~refresh-on)
           (.-resource! ~expr)))
       (~'-dispose-state [_# ^ResourceState state#]
        (doto ^ResourceState state#
          (.-k! nil)
          ~@(when dispose [`(-> .-resource (dart/type-like ~expr) ~dispose)])
          (.-resource! nil)))
       (~'-build [_# ^ResourceState state# ^widgets/BuildContext ctx#]
         (let [~binding (dart/type-like (.-resource ^ResourceState state#) ~expr)
               ~closest-context ctx#]
           (-widget-cont ~(assoc env :key nil :closest-ctx true)
             ~@forms)))
       (~'-update-state [_# ^ResourceState state#]
         (let [k# ~refresh-on]
           (when-not (= k# (.-k state#))
             (doto state#
               ~@(when dispose
                   [`(-> .-resource (dart/type-like ~expr) ~dispose)])
               (.-k! k#)
               (.-resource! ~expr))))))))

;; Shoulde we merge ResourceState and KeepAliveState in a single
;; map-holding generic class?
(deftype KeepAliveState [^:mutable ^foundation/ChangeNotifier? handle]
  :extends widgets/State
  (initState [state]
    (.initState ^super state)
    (-init-state (.-widget state) state)
    nil)
  (didUpdateWidget [state old-widget]
    (.didUpdateWidget ^super state old-widget)
    (-update-state (.-widget state) state)
    nil)
  (dispose [state]
    (-dispose-state (.-widget state) state)
    (.dispose ^super state))
  (build [state ctx]
    (-build (.-widget state) state ctx))
  ^:mixin foundation/Diagnosticable
  (debugFillProperties [this props]
    (.debugFillProperties ^super this props)
    (.add props (foundation/DiagnosticsProperty "keep-alive" (some? handle)))))

(defn ^:macro-support expand-keep-alive
  [&env env expr forms]
  `(reify :extends (widgets/StatefulWidget .key ~(:key env))
     :no-meta true
     :name-hint "keep-alive"
     (~'createState [_#] (KeepAliveState nil))
     cljd.flutter/StateLifecycle
     (~'-init-state [_# ^KeepAliveState state#])
     (~'-dispose-state [_# ^KeepAliveState state#]
      (when-some [handle# (.-handle state#)]
        (.dispose handle#)
        (.-handle! state# nil)))
     (~'-build [_# ^KeepAliveState state# ^widgets/BuildContext ctx#]
      (let [handle# (.-handle state#)]
        (if ~expr
          (when-not handle#
            (-> (.-handle! state# (foundation/ChangeNotifier))
              widgets/KeepAliveNotification
              (.dispatch ctx#)))
          (when handle#
            (doto handle# .notifyListeners .dispose)
            (.-handle! state# nil))))
      (let [~closest-context ctx#]
        (-widget-cont ~(assoc env :key nil :closest-ctx true)
          ~@forms)))
     (~'-update-state [_# state#])))

(defn get-of
  "Takes a BuildContext, a keyword and optionally a default value.
   Returns the value bound (via :bind) to this keyword."
  ([ctx k] (get-of ctx k nil))
  ([^widgets/BuildContext ctx k not-found]
   (if-some [inherited-elt (#/(.getElementForInheritedWidgetOfExactType InheritedBindings) ctx)]
     (do
       (.dependOnInheritedElement ctx inherited-elt .aspect [k])
       (get (some-> inherited-elt
              ^InheritedBindings (.-widget)
              .-bindings)
         k not-found))
     not-found)))

(defn ^:macro-support expand-get-inherited [env v forms]
  (if-not (:closest-ctx env)
    `(-widget-cont ~env :context ~closest-context :get ~v ~@forms)
    (let [inherit (if (vector? v) {:value-of v} v)
          inherit (if-some [shortcuts (:value-of inherit)]
                    (into (dissoc inherit :value-of)
                          (map (fn [type-or-kw]
                                 (let [hint (cond-> type-or-kw (seq? type-or-kw) first)]
                                   [(symbol
                                     (if (keyword? hint)
                                       (name hint)
                                       (camel-kebab
                                         (second (re-find #"([^.]+?)(?:Of|\.of)?$" (name hint))))))
                                    type-or-kw])))
                          shortcuts)
                    inherit)
          inherit (into inherit
                        (keep (fn [[k v]] (when-not (seq? v) [k (list v)])))
                        inherit)
          bindings-sym `bindings#
          {inherited-widgets false
           inherited-bindings true}
          (group-by (fn [[sym [type-or-kw]]] (keyword? type-or-kw)) inherit)]
      `(reify :extends (widgets/StatelessWidget .key ~(:key env))
        :name-hint "get"
        :no-meta true
         (~'build [_# ~closest-context]
          (let [~@(mapcat (fn [[sym [type-or-kw & args]]]
                            (let [name (name type-or-kw)
                                  has-of (re-find #"(?:\..+Of|\.of)$" name)
                                  name (cond-> name (not has-of) (str ".of"))]
                              [sym
                               (list*
                                 (symbol (namespace type-or-kw) name)
                                 closest-context args)]))
                    inherited-widgets)]
            (->>
              (-widget-cont ~(assoc env :key nil :closest-ctx true) ~@forms)
              ~@(when (seq inherited-bindings)
                  [`(let [inherited-elt# (#/(.getElementForInheritedWidgetOfExactType InheritedBindings) ~closest-context)
                          ~bindings-sym (some-> inherited-elt#
                                          ^InheritedBindings (.-widget)
                                          .-bindings)
                          ~@(mapcat
                              (fn [[sym [type-or-kw & args]]]
                                [sym
                                 `(->
                                    (get ~bindings-sym ~type-or-kw)
                                    ~(or (seq args) `do))])
                              inherited-bindings)]
                      (.dependOnInheritedElement ~closest-context
                        inherited-elt#
                        .aspect ~(into [] (map (fn [[sym [type-or-kw]]] type-or-kw)) inherited-bindings)))]))))))))

(defn ^:macro-support expand-bind [env bindings-map forms]
  `(-widget-cont ~env
     :context ctx#
     :let [bindings# ~bindings-map
           elt# (#/(.getElementForInheritedWidgetOfExactType InheritedBindings) ctx#)
           prev-bindings# (some-> elt# ^InheritedBindings (.-widget) .-bindings)
           non-shadowed-keys#
           (remove (fn [k#] (contains? bindings# k#)) (keys prev-bindings#))
           _ (when (seq non-shadowed-keys#)
               (.dependOnInheritedElement ctx# elt# .aspect non-shadowed-keys#))]
     (cljd.flutter/InheritedBindings. (merge prev-bindings# bindings#)
       (-widget-cont ~(assoc env :key nil :closest-ctx false) ~@forms))))

(defn ^:macro-support expand-vsync [env name forms]
  `(reify :extends (widgets/StatefulWidget .key ~(:key env))
     :no-meta true
     :name-hint "vsync"
     (~'createState [_#]
      (reify :extends widgets/State
        :no-meta true
        (~'build [state# ctx#]
         (-build (.-widget state#) state# ctx#))
        ^:mixin widgets/TickerProviderStateMixin))
     StateLifecycle
     (~'-build [_# state# ~closest-context]
      (let [~(vary-meta name assoc :tag `widgets/TickerProvider) state#]
         (-widget-cont ~(assoc env :key nil :closest-ctx true) ~@forms)))))


(defn ^widgets/EdgeInsetsGeometry edge-insets-geometry [x]
  (cond
    (instance? widgets/EdgeInsetsGeometry x)
    x
    (number? x) (widgets/EdgeInsets.all x)
    :else
    (let [{:keys [top bottom left right start end horizontal vertical]} x
          horizontal (or horizontal 0.0)
          vertical (or vertical 0.0)]
      (if (or start end)
        (widgets/EdgeInsetsDirectional.fromSTEB
          (or start horizontal) (or top vertical) (or end horizontal) (or bottom vertical))
        (widgets/EdgeInsets.fromLTRB
          (or left horizontal) (or top vertical) (or right horizontal) (or bottom vertical))))))

(defn ^:macro-support expand-padding [env padding forms]
  `(widgets/Padding
     .key ~(:key env)
     .padding (edge-insets-geometry ~padding)
     .child (-widget-cont ~(assoc env :key nil :closest-ctx false) ~@forms)))

(defn ^:macro-support expand-color [env color forms]
  `(widgets/ColoredBox
     .key ~(:key env)
     .color ~color
     .child (-widget-cont ~(assoc env :key nil :closest-ctx false) ~@forms)))

(defn ^:macro-support expand-visible [env visible forms]
  `(if ~visible
     (-widget-cont ~env ~@forms)
     (widgets/SizedBox.shrink .key ~(:key env))))

(defn ^:macro-support expand-height-width [env forms]
  (let [dims (take-while (fn [[k]] (case k (:height :width) true false)) (partition 2 forms))
        forms (drop (* 2 (count dims)) forms)
        {:keys [height width]} (reduce (fn [m [k v]] (assoc m k v)) {} dims)]
    `(widgets/SizedBox
       .key ~(:key env)
       .width ~width
       .height ~height
       .child (-widget-cont ~(assoc env :key nil :closest-ctx false) ~@forms))))

(defprotocol ITweenable
  (-tween [end]))

(extend-protocol ITweenable
  fallback ; supports types like double, offsets which defines + and uses * as a scaling operator
  (-tween [end] (widgets/Tween .end end))

  widgets/AlignmentGeometry
  (-tween [end] (widgets/AlignmentGeometryTween .end end))

  widgets/Alignment
  (-tween [end] (widgets/AlignmentTween .end end))

  widgets/BorderRadius
  (-tween [end] (widgets/BorderRadiusTween .end end))

  widgets/Border
  (-tween [end] (widgets/BorderTween .end end))

  widgets/BoxConstraints
  (-tween [end] (widgets/BoxConstraintsTween .end end))

  widgets/Color
  (-tween [end] (widgets/ColorTween .end end))

  widgets/Decoration
  (-tween [end] (widgets/DecorationTween .end end))

  widgets/EdgeInsetsGeometry
  (-tween [end] (widgets/EdgeInsetsGeometryTween .end end))

  widgets/EdgeInsets
  (-tween [end] (widgets/EdgeInsetsTween .end end))

  widgets/FractionalOffset
  (-tween [end] (widgets/FractionalOffsetTween .end end))

  int
  (-tween [end] (widgets/IntTween .end end))

  widgets/Matrix4
  (-tween [end] (widgets/Matrix4Tween .end end))

  widgets/Rect
  (-tween [end] (widgets/RectTween .end end))

  widgets/RelativeRect
  (-tween [end] (widgets/RelativeRectTween .end end))

  material/ShapeBorder
  (-tween [end] (material/ShapeBorderTween .end end))

  widgets/Size
  (-tween [end] (widgets/SizeTween .end end))

  widgets/TextStyle
  (-tween [end] (widgets/TextStyleTween .end end))

  material/ThemeData
  (-tween [end] (material/ThemeDataTween .end end)))

(defn lerp
  "Returns the default interpolation function (taking one argument t from 0.0 to 1.0)
   for provided values."
  [from to]
  (.-lerp (doto ^widgets/Tween (-tween to) (.-begin! from))))

(deftype CustomTween [f ^:mutable lerpf]
  :extends widgets/Tween
  (begin [this v] (set! lerpf nil) (.-begin! ^super this v))
  (end [this v] (set! lerpf nil) (.-end! ^super this v))
  (lerp [this t]
    (let [lerpf (or lerpf (set! lerpf (f (.-begin this) (.-end this))))]
      (lerpf t))))

(defn ^widgets/Tween tween-with
  "Create a tween ending at the provided value. Or return the value if it's already a tween.
   When f is not provided, a tween is created using the ITweenable protocol.
   When f is provided it must be a function of two args (begin and end values),
   returning an interpolation function from t (between 0.0 and 1.0) to
   interpolated value."
  [f end]
  (cond
    f
    (doto (CustomTween f nil)
      (.-end! end))
    (instance? widgets/Tween end) end
    :else
    (-tween end)))

(defn ^:macro-support expand-animate
  [&env env binding expr {:keys [lerp on-end duration curve] :as opts
                          :or {duration `(Duration .milliseconds 500)
                               curve `widgets/Curves.linear}} forms]
 `(widgets/TweenAnimationBuilder
    .key ~(:key env)
    .tween (tween-with ~lerp ~expr)
    .duration ~duration
    .curve ~curve
    .onEnd ~(when on-end `(fn [] ~on-end nil))
    .builder
    (fn [~closest-context ~binding _#]
      (-widget-cont ~(assoc env :key nil :closest-ctx true) ~@forms))))

(deftype SpyWidget [k child f]
  :extends (widgets/StatelessWidget .key k)
  (build [_ _] child)
  (debugFillProperties [this props-builder]
    (.debugFillProperties ^super this props-builder)
    (f props-builder)
    nil))

(defn ^:macro-support expand-spy [env expr forms]
  `(SpyWidget ~(:key env) (-widget-cont ~(assoc env :key nil) ~@forms)
     (fn [^foundation/DiagnosticPropertiesBuilder props-builder#]
       (.add props-builder# (foundation/DiagnosticsNode.message (.toString ~expr))))))

(defmacro widget
  "Returns a widget.
   The body is made of forms, dotted parameter names and directives.
   A directive is a keyword followed by a form.
   The following directives are supported:
   :key, :let, :get, :bind, :vsync, :managed, :keep-alive, :watch, :bg-watcher,
   :spy and :context.
   Forms and directives are threaded (a bit like with ->>) to nest them.
   The outermost form comes first.
   For example:
   (widget m/Center ...) expands to (m/Center .child (widget ...))
   (widget (m/Center .widthFactor 1.1)  ...) expands
   to (m/Center .widthFactor 1.1 .child (widget ...))
   .child threading is the default may you can opt to choose another param name:
   (widget (m/Scaffold .appBar (m/AppBar)) .body ...) expands
   to (m/Scaffold .appBar (m/AppBar) .body (widget ...))
   Directives:
   :key k -- use k (a regular value, nil even!) as the key for this widget.
     It's important to put a key on widgets when they can be reordered and/or the
     siblings count is not set.
   :let [bindings] -- just a regular let, all bindings are visible to the next
     forms.
   :get [SomeClass1 ... SomeClassN]
     -- shortcut for :get {:value-of [SomeClass1 ... SomeClassN]}
   :get {a AClass b :some/name :value-of [AnotherClass SomeClass.somePropOf]} -- introduces a, b, another-class (kebab-cased version of AnotherClass) and some-prop (kebab-cased version of somePropOf) in the local scope for
     next forms. a and b may be destructuring forms.
     They are bound to:
     - for classes (eg AClass and AnotherClass) to the value returned by
       their static .of method.
       For example :get [m/Theme] binds theme to (m/Theme.of ctx).
     - for keywords to the value set by the closest matching :bind directive in
       the widget's ancestors.
     Last, when .of (or the explicit method) expects more arguments (eg Localizations) then you can pass
     these argument by by using (ClassName a b c) instead of just ClassName.
   :bind {:some/name value} -- makes value available to :get {x :some/name} on
     all descendants.
   :vsync name -- bind name to a TicketProvider suitable for animation.
   :managed [bindings] -- evaluate bindings as per let but with a twist.
     The twist is that each \"binding expr\" pair can be followed by options pairs \":keyword expr\".
     Under :managed each value is going to be managed (that is its lifecycle will
     be tied to the widget) and will be disposed in due time by a call to
     its .dispose method.
     Supported options are :refresh-on and :dispose.
     - :dispose form -- specify another method to use (eg .close or .cancel)
       to properly dispose the managed resource. If arguments are required for this
       method or function you may provide a list like (.meth a b) and it will
       expand to (.meth resource a b).
     - :refresh-on expr -- the managed resource will be cycled (disposed and
       recreated) each time expr evaluates to a new value.
       Default behavior is to refresh-on on all locals (free variables) used by
       found in expr.
       Use `:refresh-on :never` to avoid refreshing (or any other constant
       instead of :never).
   :watch [bindings] -- for each \"binding expr\" pair, subscribe to expr and
     use binding to bind each value received under the subscription. A rebuild
     is triggered only when bound values change (according to equality).
     So when binding is a destructuring form, the rebuild is triggered only
     when locals bound by the destructuring do change, allowing to watch only
     parts of the value.
     Any object to which the Subscribable protocol has been extended can be
     watched.
     Out of the box it means: atoms, Streams, Futures, Listenables,
     ValueListenable and... nil.
     These bindings can take options (in the same way as :managed bindings do).
     Supported options are :as, :default, :refresh-on, :dispose, :dedup and :>
     - :as -- gives a name to the watched resource (e.g. to be able to swap! on
       it if it's an atom)
     - :default -- provides an interim value to use while the first actual value
       is available (e.g. while waiting for a Future to complete or a Stream to
       produce a value). Useless when the watched resource can provide a current
       value (atoms for example).
     - :refresh-on expr -- see :managed
     - :dispose form -- if the object under watch also needs to be managed use
       this option. Works like :dispose for :managed except for \":dispose true\"
       which is a shortcut for \":dispose .dispose\".
     - :dedup boolean -- defaults to true, set it to false to rebuild on every
       change
     - :> form -- this one is meant to be used with Listenable instances because
       they don't produce values, just a change notification. So if this option
       is not used you only get trues from the subscription.
       When this option is set then values are produced by evaluating
       (-> subscribable form).
   :bg-watcher ([binding expr & options] body) -- creates a background watcher on
     expr (which must be subscribable, see :watch). Same options as :watch are
     supported.
     Main differences from :watch are:
     - does not trigger rebuilds
     - bindings are only visible in the body of the watcher, not to the rest of
       the widget.
   :keep-alive expr -- when expr is true, notify the AutomaticKeepAlive ancestor
     that it must keep the widget tree alive.
     See https://api.flutter.dev/flutter/widgets/KeepAlive-class.html for more
     information and the contexts in which an AutomaticKeepAlive ancestor is
     implicitely created.
   :spy expr -- make expr's value available into Flutter DevTools.
   :context name -- bind name to the current BuildContext.
   :padding p -- p can be either: a EdgeInsetsGeometry instance, a number
     (applied to all four directions) or a map with keys :left :right :top
     :bottom :start :end :horizontal :vertical. If either :start or :end are
     non-nil then :left and :right are ignored. :vertical and :horizontal have
     e lesser precedence than the others.
   :color c -- specify the background color; shorthand for (ColoredBox .color c ...)
   :width w
   :height h -- specify width and and height shorthands for SizedBox
   :when test -- when test is falsy the subsequent widget is replaced by an empty widget (m/SizedBox.shrink)
   :animate [binding expr & options] -- animate changes to `expr` value; during
     animation, at each frame an interpolated value between the previous value
     :of `expr` and the new one is bound to `binding`. Supported options are:
     - :duration d -- the animation length as a Duration instance (500ms by default),
     - :curve c -- the Curve instance used to interpolate between values (Curves.linear by default).
     - :on-end expr -- expr is evaluated when the animation reaches its end.
     - :lerp f -- to provide custom interpolation, f must be a function of two args (from and to)
       returning a function of t (a double usually between 0.0 and 1.0 but some Curve instances can
       generate values out of this range, see Curves.easeInOutBack for example).
     Default interpolation is provided by cljd.flutter/lerp for many types:
     int, double, Offset, Size, TextStyle, Color... and can be extebded via the ITweenable protocol."
  [& body]
  `(-widget-cont {} ~@body))

(defn- ^:macro-support stateless-flush [env forms]
  `(reify :extends (widgets/StatelessWidget .key ~(:key env))
     :name-hint "widget"
     :no-meta true
     (~'build [_# ~closest-context]
      (-widget-cont ~(assoc env :key nil :closest-ctx true) ~@forms))))

(defn- ^:macro-support expand-directive [&env env k v form & more-forms]
  (let [ksym `k#
        forms (cons form more-forms)]
    (case k
      :key `(let [~ksym (foundation/ValueKey ~v)]
              (-widget-cont ~(assoc env :key ksym) ~@forms))
      :let `(let ~v (-widget-cont ~env ~@forms))
      :watch
      (if-some [[binding expr & more] (seq v)]
        (let [[opts & more] (collect-options more
                                             #(or (qualified-keyword? %)
                                                  (#{:default :refresh-on :dispose :> :as} %)))]
          (expand-watch &env env binding expr opts (list* :watch more forms)))
        `(-widget-cont ~env ~@forms))
      :managed
      (if-some [[binding expr & more] (seq v)]
        (let [[opts & more] (collect-options more  #{:dispose :refresh-on})]
          (expand-resource &env env binding expr opts (list* :managed more forms)))
        `(-widget-cont ~env ~@forms))
      :keep-alive
      (expand-keep-alive &env env v forms)
      :bg-watcher
      (let [[[binding expr & more] & body] (seq v)
            [opts & more] (collect-options more
                            #(or (qualified-keyword? %)
                               (#{:refresh-on :dispose :>} %)))]
        (when more
          (throw (Exception. "Extra forms found after options.")))
        (expand-bg-watcher &env env binding expr opts body forms))
      :bind (expand-bind env v forms)
      :get (expand-get-inherited env v forms)
      :context
      (if (:closest-ctx env)
        `(let [~v ~closest-context] (-widget-cont ~env ~@forms))
        (stateless-flush env (list* :context v forms)))
      :spy (expand-spy env v forms)
      :vsync (expand-vsync env v forms)
      :padding (expand-padding env v forms)
      :color (expand-color env v forms)
      (:height :width) (expand-height-width env (list* k v forms))
      :when (expand-visible env v forms)
      :animate
      (if-some [[binding expr & more] (seq v)]
        (let [[opts & more] (collect-options more #{:duration :curve :on-end :lerp})]
          (expand-animate &env env binding expr opts (list* :animate more forms)))
        `(-widget-cont ~env ~@forms)))))

(defmacro -widget-cont
  "PRIVATE DONT USE"
  [env form & more-forms]
  (cond
    (keyword? form) (apply expand-directive &env env form more-forms)
    (:key env)
    (stateless-flush env (cons form more-forms))
    (nil? more-forms) form
    (= '.child form) ; for nested f/widgets ending by a directive
    `(-widget-cont ~env ~@more-forms)
    (symbol? form)
    `(-widget-cont ~env ~(with-meta (list form) (meta form)) ~@more-forms)
    (seq? form)
    (let [[maybe-prop] more-forms
          prop (when (and (simple-symbol? maybe-prop)
                       (.startsWith (name maybe-prop) "."))
                 maybe-prop)
          env (dissoc env :closest-ctx)
          more-forms (cond-> more-forms prop next)
          prop (or prop '.child)
          widget-name (-> prop name gensym)]
      (-> `(let [~widget-name (f/-widget-cont ~env ~@more-forms)]
             (~@form ~prop ~widget-name))
        (with-meta (meta form))))
    :else (throw (ex-info (str "Unexpected widget form: " (pr-str form)) {:form form :more-forms more-forms}))))

(defmacro build
  "Generates a so-called \"builder\" function, that is a widget-returning function which expects 1+ arguments, where the first argument is a BuildContext. (Such fns are expected for example as the .itemBuilder param to ListView/builder)
  `argsvec` is the argument vector, without the BuildContext. If argsvec is empty it can be omitted.
  After the `argsvec` comes a body, interpreted as per the `widget` macro."
  [argsvec? & body]
  (if (vector? argsvec?)
    `(fn ^widgets/Widget [~closest-context ~@argsvec?] (-widget-cont {:closest-ctx true} ~@body))
    `(fn [~closest-context] (-widget-cont {:closest-ctx true} ~argsvec? ~@body))))

(defmacro run
  "Starts an application, takes a widget body and uses it as the application root widget.
  Hot-reload friendly."
  [& widget-body]
  `(widgets/runApp
     ~(stateless-flush {} widget-body)))

(deftype Cell [^Map subs]
  (subto [self s])
  (update [self s x]))

(def ^:private ^:dynamic ^Map *old-deps* (Map))
(def ^:private ^:dynamic ^Map *new-deps* (Map))
(def ^:private ^:dynamic ^Cell? *cell* nil)

(defn <!
  ([s]
   (if-some [v (. *new-deps* "[]" s)]
     v
     (if (.containsKey *new-deps* s)
       nil
       (if-some [v (. *old-deps* "[]" s)]
         (do ; move to new gen
           (.remove *old-deps* s)
           (. *new-deps* "[]=" s v)
           v)
         (cond
           (.containsKey *old-deps* s)
           (do ; move to new gen
             (.remove *old-deps* s)
             (. *new-deps* "[]=" s nil)
             nil)
           (-> *cell* .-subs (.containsKey s)) ; subscription which hasn't delivered a value yet and no immediate value
           (throw "no value yet!")
           :else
           ; a new subscription!
           (let [update! (fn [x] (.update *cell* s x))
                 sub (.subto *cell* s)]
             ; subscription is going to fill new-deps
             (if (-call-with-immediate-value s sub update!)
               (. *new-deps* "[]" s)
               (throw "no value yet!"))))))))
  ([s & {:keys [default]}]
   (if-some [v (. *new-deps* "[]" s)]
     v
     (if (.containsKey *new-deps* s)
       nil
       (if-some [v (. *old-deps* "[]" s)]
         (do ; move to new gen
           (.remove *old-deps* s)
           (. *new-deps* "[]=" s v)
           v)
         (if (.containsKey *old-deps* s)
           (do ; move to new gen
             (.remove *old-deps* s)
             (. *new-deps* "[]=" s nil)
             nil)
           (-> *cell* .-subs (.containsKey s)) ; subscription which hasn't delivered a value yet and no immediate value
           default
           ; a new subscription!
           (let [update! (fn [x] (.update *cell* s x))
                 sub (.subto *cell* s)]
             ; subscription is going to fill new-deps
             (if (-call-with-immediate-value s sub update!)
               (. *new-deps* "[]" s)
               default))))))))

(def ^:private NO-VALUE ^:unique (Object))

(deftype Cell [f ^:mutable v ^Map subscribers
               ^:mutable ^int refreshing ^:mutable ^Map deps ^Map subs
               ^:mutable ^Map spare-map]
  (subto [self s]
    (let [sub (-subscribe s (fn [x] (.update self s x)))]
      (. subs "[]=" s sub)
      sub))
  (refresh [self]
    (assert (zero? refreshing))
    ; deps=mapA, spare-map=mapB and mapB is empty
    (let [old-deps deps]
      (set! deps spare-map)
      ; now deps=mapB, spare-map=mapB, old-deps=mapA
      (set! refreshing 1)
      (let [v' (binding [*old-deps* old-deps
                         *new-deps* deps
                         *cell* self]
                 (try
                   (f)
                   (catch Object e
                     v)))]
        (doseq [s (.-keys old-deps)]
          (-unsubscribe s (.remove subs s)))
        (set! spare-map (doto old-deps .clear))
        ; now deps=mapB, spare-map=mapA and mapA is empty
        (when-not (= v v')
          ; propagating new value
          (set! refreshing 2)
          (set! v v')
          (doseq [f! (.-values subscribers)]
            (try (f! v') (catch Object e)))
          (.forEach spare-map
            (fn [sub f!]
              (if (identical? sub f!) ; sub as f! -> tombstone
                (.remove subscribers sub)
                (. subscribers "[]=" sub f!))))
          (.clear spare-map))
        (set! refreshing 0))))
  (update [self s x]
    (case refreshing
      ; not refreshing
      0 (do
          (. deps "[]=" s x)
          (.refresh self))
      ; recomputing
      1 (if (identical? self *cell*) ; init of a fresh subscription
          (. deps "[]=" s x)
          (throw (ex-info "I have no idea if it's legit" {})))
      ; broadcasting new value
      2 (throw (ex-info "Circular dependency" {:cell self}))))
  Subscribable
  (-subscribe [self f!]
    (case refreshing
      ; not refreshing
      0 (let [sub ^:unique (Object)]
          (when (zero? (.-length subscribers))
            (.refresh self))
          (. subscribers "[]=" sub f!)
          sub)
      ; recomputing
      1 (throw (ex-info "Circular dependency" {:cell self}))
      ; broadcasting new value
      2 (let [sub ^:unique (Object)]
          (. spare-map "[]=" sub f!)
          sub)))
  (-call-with-immediate-value [self sub f!]
    (if (identical? NO-VALUE v)
      false
      (do (f! v) true)))
  (-unsubscribe [self sub]
    (case refreshing
      0 (do
          (.remove subscribers sub)
          (when (zero? (.-length subscribers))
            (.forEach subs (fn [s sub] (-unsubscribe s sub)))
            (.clear subs)
            (.clear deps)
            (set! v nil)))
      1 (throw (ex-info "Circular dependency" {:cell self}))
      2 (. spare-map "[]=" sub sub))))

(defn cell [f]
  (Cell f NO-VALUE (Map/identity) 0 (Map) (Map) (Map)))

(defmacro $ [expr]
  `(cell (fn [] ~expr)))

(deftype Retriable [thunk ^:mutable ^Future? fut ^Map subscriptions]
  Subscribable
  (-subscribe [retriable f!]
    (let [sub ^:unique (Object)]
      (. subscriptions "[]=" sub f!)
      sub))
  (-call-with-immediate-value [x sub f!] false)
  (-unsubscribe [x sub] (.remove subscriptions sub)))

(defn retry!
  "Retries the retrieable, returns a future which will yield a value
   when the current try is over.
   Meant to be used for user-initiated retries, not automatic retries."
  [^Retriable retriable]
  (let [this-fut (.-fut! retriable (Future (.-thunk retriable)))]
    (.then this-fut
      (fn [x]
        (try
          (when (identical? this-fut (.-fut retriable))
            (run! #(% x) (-> retriable .-subscriptions .-values)))
          (catch Object e (dart:core/print e)))))))

(defmacro retriable
  "Returns a retriable: a future-like which can be retried.
   Meant to be used for user-initiated retries, not automatic retries."
  [& async-try-body]
  `(doto (Retriable (fn [] (try ~@async-try-body)) nil (Map))
     retry!))
