(ns sample.delayed-update
  "Different versions of updating from futures"
  (:require ["package:flutter/material.dart" :as m]
            [cljd.flutter :as f]))

(defonce my-result (atom ""))

(defn my-delayed-fn
  "a sample function that returns a dart future"
  [x] (Future/delayed (Duration .seconds 1) (fn [] (str x " is working!"))))

(defn wait-for-result! [] (reset! my-result (await (my-delayed-fn "wait-for-result!"))))

(defn main []
  (f/run
   (m/MaterialApp
    .title "Delayed Update Demo")
   .home
   (m/Scaffold
    .appBar (m/AppBar .title (m/Text "Delayed Update")))
   .body
   m/Center
   (f/widget
    :watch [r my-result]
    (m/Column .children
              [
               ;; using reset!
               (m/ElevatedButton
                .child (m/Text "Using reset!")
                .onPressed (fn [] (reset! my-result (await (my-delayed-fn "reset!"))) nil))
               ;; using swap!
               ;; this is a bit contrieved because there's no reason to not use reset! here
               (m/ElevatedButton
                .child (m/Text "swap")
                .onPressed (fn [] (let [v (await (my-delayed-fn "swap!"))] (swap! my-result (fn [_] v))) nil))
               ;; using a function that swaps out the atom elsewhere
               (m/ElevatedButton
                .child (m/Text "delayed fn")
                .onPressed (fn [] (wait-for-result!) nil))
               (m/Text r)]))))
